name: LLM-Powered Code Review + SonarQube

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review-and-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0   # need full git history to compute diffs

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract PR diff
        id: diff
        run: |
          python - <<'EOF'
          from reviewer.diff_extractor import extract_diff, get_pr_info
          diff_text = extract_diff()
          pr_info = get_pr_info()
          # Save diff & pr_info to environment files for subsequent steps
          print(f"::set-output name=diff::{diff_text}")
          print(f"::set-output name=pr_number::{pr_info['pr_number']}")
          EOF

      - name: Call LLM for review
        id: llm
        run: |
          python - <<'EOF'
          import os, json
          from reviewer.llm_reviewer import call_openai_llm
          from reviewer.diff_extractor import get_pr_info

          pr_number = int(os.getenv("INPUT_PR_NUMBER") or os.getenv("GITHUB_REF_NAME"))
          diff_text = """${{ steps.diff.outputs.diff }}"""
          comments = call_openai_llm(diff_text)
          # Save comments to a JSON file for the next step
          with open("llm_comments.json", "w") as f:
              json.dump(comments, f)
          EOF
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        # We pass `pr_number` and `diff` via outputs
        # We need a slight hack to access them; see below.

      - name: Post comments to GitHub
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comments = JSON.parse(fs.readFileSync('llm_comments.json', 'utf8'));
            const pr_number = parseInt('${{ steps.diff.outputs.pr_number }}');
            for (const c of comments) {
              await github.rest.pulls.createReviewComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                body: c.comment,
                path: c.file_path,
                line: c.line,
                side: 'RIGHT'
              });
            }

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Install Sonar Scanner CLI
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          export PATH="${{ runner.workspace }}/sonar-scanner-4.8.0.2856-linux/bin:$PATH"
          # Run analysis
          sonar-scanner -Dsonar.login=$SONAR_TOKEN \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.projectKey=ai-code-reviewer-demo \
                        -Dsonar.sources=. 

      - name: Fetch SonarQube Metrics & Aggregate
        run: |
          python - <<'EOF'
          from reviewer.sonar_wrapper import wait_for_sonar_analysis, fetch_sonar_metrics, aggregate_results
          from reviewer.diff_extractor import get_pr_info

          sonar_key = wait_for_sonar_analysis()
          metrics = fetch_sonar_metrics(sonar_key)
          pr_info = get_pr_info()
          import json
          # Load LLM comments from file
          with open("llm_comments.json", "r") as f:
              llm_comments = json.load(f)
          # Aggregate into summary.md
          summary_path = aggregate_results(llm_comments, metrics, pr_info["pr_number"])
          print(f"Summary available at {summary_path}")
          EOF

      - name: Upload Summary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: review-summary
          path: review_summary_pr_${{ steps.diff.outputs.pr_number }}.md
